#include <cmath>
#include <vector>

#include "ouster/os1_packet.h"

namespace ouster {
namespace OS1 {

extern const std::vector<double> beam_altitude_angles = {
    17.709, 17.106, 16.526, 15.976, 15.486, 14.907, 14.356, 13.811, 
    13.337, 12.767, 12.225, 11.676, 11.197, 10.644, 10.115, 9.582, 
    9.097, 8.546, 8.019, 7.48, 7.007, 6.458, 5.92, 5.388, 4.912, 
    4.374, 3.846, 3.307, 2.823, 2.292, 1.761, 1.219, 0.739, 0.21, 
    -0.332, -0.87, -1.344, -1.881, -2.324, -2.968, -3.44, -3.982, 
    -4.521, -5.055, -5.548, -6.075, -6.62, -7.165, -7.648, -8.181, 
    -8.724, -9.279, -9.776, -10.301, -10.845, -11.406, -11.908, 
    -12.447, -12.993, -13.565, -14.093, -14.615, -15.182, -15.763

    // 16.611,  16.084,  15.557,  15.029,  14.502,  13.975,  13.447,  12.920,
    // 12.393,  11.865,  11.338,  10.811,  10.283,  9.756,   9.229,   8.701,
    // 8.174,   7.646,   7.119,   6.592,   6.064,   5.537,   5.010,   4.482,
    // 3.955,   3.428,   2.900,   2.373,   1.846,   1.318,   0.791,   0.264,
    // -0.264,  -0.791,  -1.318,  -1.846,  -2.373,  -2.900,  -3.428,  -3.955,
    // -4.482,  -5.010,  -5.537,  -6.064,  -6.592,  -7.119,  -7.646,  -8.174,
    // -8.701,  -9.229,  -9.756,  -10.283, -10.811, -11.338, -11.865, -12.393,
    // -12.920, -13.447, -13.975, -14.502, -15.029, -15.557, -16.084, -16.611,
};

extern const std::vector<double> beam_azimuth_angles = {
    3.193, 1.003, -1.178, -3.327, 3.152, 0.993, -1.161, -3.29, 
    3.109, 0.97, -1.144, -3.255, 3.09, 0.976, -1.15, -3.242, 
    3.066, 0.971, -1.124, -3.217, 3.061, 0.98, -1.125, -3.197, 
    3.077, 0.984, -1.105, -3.194, 3.075, 0.997, -1.092, 
    -3.168, 3.104, 1.015, -1.075, -3.153, 3.111, 1.037, 
    -1.107, -3.138, 3.124, 1.042, -1.037, -3.134, 3.157, 
    1.07, -1.023, -3.125, 3.192, 1.086, -1.005, -3.108,
     3.237, 1.117, -0.988, -3.111, 3.282, 1.155, -0.967, 
     -3.104, 3.333, 1.196, -0.955, -3.104
    
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
    // 3.164, 1.055, -1.055, -3.164, 3.164, 1.055, -1.055, -3.164,
};

extern const std::vector<double> imu_to_sensor_transform = {
    1, 0, 0, 6.253, 0, 1, 0, -11.775, 0, 0, 1, 7.645, 0, 0, 0, 1};

extern const std::vector<double> lidar_to_sensor_transform = {
    -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 36.18, 0, 0, 0, 1};

std::vector<double> make_xyz_lut(int W, int H,
                                 const std::vector<double>& azimuth_angles,
                                 const std::vector<double>& altitude_angles) {
    const int n = W * H;
    std::vector<double> xyz = std::vector<double>(3 * n, 0);

    for (int icol = 0; icol < W; icol++) {
        double h_angle_0 = 2.0 * M_PI * icol / W;
        for (int ipx = 0; ipx < H; ipx++) {
            int ind = 3 * (icol * H + ipx);
            double h_angle =
                (azimuth_angles.at(ipx) * 2 * M_PI / 360.0) + h_angle_0;

            xyz[ind + 0] = std::cos(altitude_angles[ipx] * 2 * M_PI / 360.0) *
                           std::cos(h_angle);
            xyz[ind + 1] = -std::cos(altitude_angles[ipx] * 2 * M_PI / 360.0) *
                           std::sin(h_angle);
            xyz[ind + 2] = std::sin(altitude_angles[ipx] * 2 * M_PI / 360.0);
        }
    }
    return xyz;
}

std::vector<int> get_px_offset(int lidar_mode) {
    auto repeat = [](int n, const std::vector<int>& v) {
        std::vector<int> res{};
        for (int i = 0; i < n; i++) res.insert(res.end(), v.begin(), v.end());
        return res;
    };

    switch (lidar_mode) {
        case 512:
            return repeat(16, {0, 3, 6, 9});
        case 1024:
            return repeat(16, {0, 6, 12, 18});
        case 2048:
            return repeat(16, {0, 12, 24, 36});
        default:
            return std::vector<int>{64, 0};
    }
}
}
}
